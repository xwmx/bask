#!/usr/bin/env bash
#
#                   ___         ___         ___
#      _____       /  /\       /  /\       /__/|
#     /  /::\     /  /::\     /  /:/_     |  |:|
#    /  /:/\:\   /  /:/\:\   /  /:/ /\    |  |:|
#   /  /:/~/::\ /  /:/~/::\ /  /:/ /::\ __|  |:|
#  /__/:/ /:/\:/__/:/ /:/\:/__/:/ /:/\:/__/\_|:|____
#  \  \:\/:/~/:\  \:\/:/__\\  \:\/:/~/:\  \:\/:::::/
#   \  \::/ /:/ \  \::/     \  \::/ /:/ \  \::/~~~~
#    \  \:\/:/   \  \:\      \__\/ /:/   \  \:\
#     \  \::/     \  \:\       /__/:/     \  \:\
#      \__\/       \__\/       \__\/       \__\/
#
# A mini-framework for command-centric Bash scripts.
#
# https://github.com/xwmx/bask
#
# Copyright (c) 2015 William Melody • hi@williammelody.com

###############################################################################
# Strict Mode
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

###############################################################################
# Globals
###############################################################################

_VERSION="0.5.1"

# DEFAULT_COMMAND
#
# The command to be run by default, when no command name is specified. If the
# environment has an existing $DEFAULT_COMMAND set, then that value is used.
DEFAULT_COMMAND="${DEFAULT_COMMAND:-help}"

###############################################################################
# Debug
###############################################################################

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    {
      # Prefix debug message with "bug (U+1F41B)"
      printf "🐛  %s " "${__DEBUG_COUNTER}"
      "${@}"
      printf "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n"
    } 1>&2
  fi
}

# debug()
#
# Usage:
#   debug "Debug info. Variable: $0"
#
# Print the specified message if the `$_USE_DEBUG` variable has been set.
#
# This is a shortcut for the _debug() function that simply echos the message.
debug() {
  _debug echo "${@}"
}

###############################################################################
# Error Messaging
###############################################################################

# _exit_1()
#
# Usage:
#   _exit_1 <command>
#
# Description:
#   Exit with status 1 after executing the specified command with output
#   redirected to standard error. The command is expected to print a message
#   and should typically be either `echo`, `printf`, or `cat`.
_exit_1() {
  {
    printf "%s " "$(tput setaf 1)!$(tput sgr0)"
    "${@}"
  } 1>&2
  exit 1
}

# _warn()
#
# Usage:
#   _warn <command>
#
# Description:
#   Print the specified command with output redirected to standard error.
#   The command is expected to print a message and should typically be either
#   `echo`, `printf`, or `cat`.
_warn() {
  {
    printf "%s " "$(tput setaf 1)!$(tput sgr0)"
    "${@}"
  } 1>&2
}

###############################################################################
# Options
###############################################################################

# Parse Options ###############################################################

_ARGUMENTS=()
_SUBCOMMAND=
_USE_DEBUG=0

while ((${#}))
do
  __opt="${1}"

  shift

  case "${__opt}" in
    -h|--help)
      _SUBCOMMAND="help"
      ;;
    --version)
      _SUBCOMMAND="version"
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    *)
      if [[ -z ${_SUBCOMMAND} ]]
      then
        _SUBCOMMAND="${__opt}"
      else
        _ARGUMENTS+=("${__opt}")
      fi
      ;;
  esac
done

###############################################################################
# Environment
###############################################################################

# $_ME / $_ME
#
# Set to the program's basename.
_ME=$(basename "${0}")

_debug printf "\${_ME}: %s\\n" "${_ME}"

# $_THIS_BASENAME
#
# Set to this file's basename
_THIS_BASENAME=$(basename "${BASH_SOURCE[0]}")

_debug printf "\${_THIS_BASENAME}: %s\\n" "${_THIS_BASENAME}"

# _is_sourced()
#
# Determine whether the base program is being run or whether this file is being
# sourced by a dependent script.
_is_sourced() {
  [[ ! "${_ME}" == "${_THIS_BASENAME}" ]]
}

_debug printf \
  "_is_sourced(): %s\\n" \
  "$(_is_sourced && echo "yes" || echo "no")"

# $_CALLER_DIRECTORY
#
# Set to the current directory that the program is called from.
_CALLER_DIRECTORY="${PWD}"

_debug printf "\${_CALLER_DIRECTORY}: %s\\n" "${_CALLER_DIRECTORY}"

###############################################################################
# Load Commands
###############################################################################

# _search_parents_and_source()
#
# Usage:
#   _search_parents_and_source <filename>
#
# Description:
#   Recursively search parent directories for a file with the given basename
#   and source the first one that's found.
_search_parents_and_source() {
  local _source_file="${1:-}"

  if [[ / == "${PWD}" ]]
  then
    cd "${_CALLER_DIRECTORY}"
    return
  elif [[ -f "${PWD}/${_source_file}" ]]
  then
    source "${PWD}/${_source_file}"
    cd "${_CALLER_DIRECTORY}"
    return
  else
    cd ..
    _search_parents_and_source "${_source_file}"
  fi
}

# _source_baskfile()
#
# Usage:
#   _source_baskfile
#
# Description:
#   Source the first Baskfile found in the current directory or any parent
#   directories.
_source_baskfile() {
  local _source_file="Baskfile"

  if [[ -f "${PWD}/${_source_file}" ]]
  then
    source "${PWD}/${_source_file}"
  else
    _search_parents_and_source "${_source_file}"
  fi
}

# Initialize $_DEFINED_COMMANDS array.
_DEFINED_COMMANDS=()
# Initialize $_BUILTIN_COMMANDS array with list of default commands.
_BUILTIN_COMMANDS=(
  "commands"
  "help"
  "new"
  "version"
)
# Initialize the $_LOCAL_COMMANDS array.
_LOCAL_COMMANDS=()

# _load_commands()
#
# Usage:
#   _load_commands
#
# Description:
#   Loads all of the commands sourced in the environment.
_load_commands() {
  _debug printf "_load_commands(): entering...\\n"
  _debug printf "_load_commands() declare -F:\\n%s\\n" "$(declare -F)"

  # If this file is not sourced, indicating that commands are not defined in a
  # dependent script, then look for and source the first Baskfile in the
  # parent tree.
  if ! _is_sourced
  then
    _source_baskfile
  fi

  # declare is a bash built-in shell function that, when called with the '-F'
  # option, displays all of the functions with the format
  # `declare -f function_name`. These are then assigned as elements in the
  # $function_list array.
  local _function_list=
  while IFS='' read -r __line
  do
    _function_list+=("${__line}")
  done < <(declare -F)

  for __function in "${_function_list[@]:-}"
  do
    # Each element has the format `declare -f function_name`, so set the name
    # to only the 'function_name' part of the string.
    local _function_name=
    _function_name=$(printf "%s\\n" "${__function}" | awk '{ print $3 }')

    _debug printf \
      "_load_commands() \${_function_name}: %s\\n" \
      "${_function_name}"

    # Add the function name to the $_DEFINED_COMMANDS array unless it starts
    # with an underscore or is one of the describe(), debug(), or die()
    # functions, since these are treated as having 'private' visibility. Also
    # exclude init() and version(), which will be readded explicityly based on
    # whether this file is being sourced or run directly.
    #
    # Secondly, add the function name to the $_LOCAL_COMMANDS array unless the
    # command name exists within the $_BUILTIN_COMMANDS array.
    if ! {
      [[ -z "${_function_name}"                       ]] || \
      [[    "${_function_name}" =~ ^_(.*)             ]] || \
      [[    "${_function_name}" == "bats_readlinkf"   ]] || \
      [[    "${_function_name}" == "debug"            ]] || \
      [[    "${_function_name}" == "desc"             ]] || \
      [[    "${_function_name}" == "describe"         ]] || \
      [[    "${_function_name}" == "die"              ]] || \
      [[    "${_function_name}" == "new"              ]] || \
      [[    "${_function_name}" == "version"          ]]
    }
    then
      _DEFINED_COMMANDS+=("${_function_name}")

      if ! _contains "${_function_name}" "${_BUILTIN_COMMANDS[@]}"
      then
        _LOCAL_COMMANDS+=("${_function_name}")
      fi
    fi
  done

  # If not sourced, add new() and version() back to command list.
  if ! _is_sourced
  then
    _DEFINED_COMMANDS+=("new" "version")
  fi

  _debug printf \
    "commands() \${_DEFINED_COMMANDS}:\\n%s\\n" \
    "${_DEFINED_COMMANDS[*]:-}"
  _debug printf \
    "commands() \${_BUILTIN_COMMANDS}:\\n%s\\n" \
    "${_BUILTIN_COMMANDS[*]:-}"
  _debug printf \
    "commands() \${_LOCAL_COMMANDS}:\\n%s\\n" \
    "${_LOCAL_COMMANDS[*]:-}"
}

###############################################################################
# Init / Main
###############################################################################

# _init()
#
# Usage:
#   _init
#
# The primary function for starting the program.
#
# NOTE: must be called at end of program after all commands have been defined.
_init() {
  if [[ -z "${_SUBCOMMAND}" ]]
  then
    _SUBCOMMAND="${DEFAULT_COMMAND}"
  fi

  # Load all of the commands.
  _load_commands

  # If the command is defined, run it, otherwise return an error.
  if _contains "${_SUBCOMMAND}" "${_DEFINED_COMMANDS[@]:-}"
  then
    ${_SUBCOMMAND} "${_ARGUMENTS[@]:-}"
  else
    _exit_1 printf "Unknown command: %s\\n" "${_SUBCOMMAND}"
  fi
}

# _main()
#
# Usage:
#   _main
#
# Alias for _init. Used by some existing scripts.
_main() {
  _init "${@}"
}

###############################################################################
# Utility Functions
###############################################################################

# _alias_subcommand()
#
# Usage:
#   _alias_subcommand <subcommand> <alias>
#
# Description:
#   Create an <alias> of <subcommand>. NOTE: aliases also have to be added to
#   the $_SUBCOMMANDS variable.
_alias_subcommand() {
  local _subcommand="${1:-}"
  local _alias="${2:-}"

  if [[ -z "${_subcommand}" ]] || [[ -z "${_alias}" ]]
  then
    return 1
  fi

  local _subcommand_escaped=
  _subcommand_escaped="$(describe escape "${1:-}")"

  local _alias_escaped=
  _alias_escaped="$(describe escape "${1:-}")"

  eval "describe \"${_alias_escaped}\" \"\$____describe_${_subcommand_escaped}\""
  eval "${_alias}() { ${_subcommand} \"\${@}\"; }"
}

# _function_exists()
#
# Usage:
#   _function_exists <name>
#
# Description:
#   Takes a potential function name as an argument and returns whether a
#   function exists with that name.
_function_exists() {
  [[ "$(type -t "${1:-}")" == 'function' ]]
}

# _command_exists()
#
# Usage:
#   _command_exists <name>
#
# Exit / Error Status:
#   0 (success, true) If a command with <name> is defined in the current
#                     environment.
#   1 (error,  false) If not.
#
# Information on why `hash` is used here:
# http://stackoverflow.com/a/677212
_command_exists() {
  hash "${1}" 2>/dev/null
}

# _contains()
#
# Usage:
#   _contains <query> <list-item>...
#
# Exit / Error Status:
#   0 (success, true)  If the item is included in the list.
#   1 (error,  false)  If not.
#
# Examples:
#   _contains "${_query}" "${_list[@]}"
_contains() {
  local _query="${1:-}"
  shift

  if [[ -z "${_query}"  ]] ||
     [[ -z "${*:-}"     ]]
  then
    return 1
  fi

  for __element in "${@}"
  do
    [[ "${__element}" == "${_query}" ]] && return 0
  done

  return 1
}

# _download_from()
#
# Usage:
#   _download_from <url> [<outfile>]
#
# Description:
#   Download the file at <url> and print to standard output or <outfile>, if
#   present. Uses `curl` if available, falling back to `wget`. Messages from
#   `curl` and `wget` are suppressed.
#
# Exit / Error Status:
#   0 (success, true)  If the download is successful.
#   1 (error,  false)  If there was an error.
#
# Examples:
#   # Download and stream to standard output.
#   _download_from "https://example.com" | less
#
#   # Download to outfile with error handling.
#   if ! _download_from "https://example.com/example.pdf" /path/to/example.pdf
#   then
#     printf "Download error.\\n"
#     exit 1
#   fi
_download_from() {
  local _downloaded=0
  local _target_path="${2:-}"
  local _timeout=15
  local _url="${1:-}"

  if [[ -z "${_url}" ]] ||
     [[ ! "${_url}" =~ ^https\:|^http\:|^file\:|^ftp\:|^sftp\: ]]
  then
    return 1
  fi

  if [[ -n "${_target_path}" ]]
  then
    if hash "curl" 2>/dev/null
    then
      curl                              \
        --silent                        \
        --location                      \
        --connect-timeout "${_timeout}" \
        "${_url}"                       \
        --output "${_target_path}"      &&
          _downloaded=1
    elif hash "wget" 2>/dev/null
    then
      wget                              \
        --quiet                         \
        --connect-timeout="${_timeout}" \
        --dns-timeout="${_timeout}"     \
        -O "${_target_path}"            \
        "${_url}"                       \
        2>/dev/null                     &&
          _downloaded=1
    fi
  else
    if hash "curl" 2>/dev/null
    then
      curl                              \
        --silent                        \
        --location                      \
        --connect-timeout "${_timeout}" \
        "${_url}"                       &&
          _downloaded=1
    elif hash "wget" 2>/dev/null
    then
      wget                              \
        --quiet                         \
        --connect-timeout="${_timeout}" \
        --dns-timeout="${_timeout}"     \
        -O -                            \
        "${_url}"                       \
        2>/dev/null                     &&
          _downloaded=1
    fi
  fi

  if ! ((_downloaded))
  then
    return 1
  fi
}

# _join()
#
# Usage:
#   _join <delimiter> <list-item>...
#
# Description:
#   Print a string containing all <list-item> arguments separated by
#   <delimeter>.
#
# Example:
#   _join "${_delimeter}" "${_list[@]}"
#
# More information:
#   https://stackoverflow.com/a/17841619
_join() {
  local _delimiter="${1}"
  shift
  printf "%s" "${1}"
  shift
  printf "%s" "${@/#/${_delimiter}}" | tr -d '[:space:]'
}

# _blank()
#
# Usage:
#   _blank [<string>]
#
# Exit / Error Status:
#   0 (success, true)  If the argument is blank.
#   1 (error,  false)  If the argument is present.
_blank() {
  [[ -z "${1:-}" ]]
}

# _present()
#
# Usage:
#   _present [<string>]
#
# Exit / Error Status:
#   0 (success, true)  If the argument is present.
#   1 (error,  false)  If the argument is blank.
_present() {
  [[ -n "${1:-}" ]]
}

# _interactive_input()
#
# Usage:
#   _interactive_input
#
# Exit / Error Status:
#   0 (success, true)  If the current input is interactive (eg, a shell).
#   1 (error,  false)  If the current input is stdin / piped input.
_interactive_input() {
  [[ -t 0 ]]
}

# _piped_input()
#
# Usage:
#   _piped_input
#
# Returns:
#   0  If the current input is stdin / piped input.
#   1  If the current input is interactive (eg, a shell).
_piped_input() {
  ! _interactive_input
}

# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Description:
#   Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
#   and `readlink -e`, which canonicalize by following every symlink in every
#   component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

# _sed_i()
#
# Usage:
#   _sed_i <sed option>...
#
# Description:
#   `sed -i` takes an extension on macOS, but that extension can cause
#   errors in GNU `sed`. `_sed_i`detects which one is available and calls
#   `sed -i` with the appropriate arguments.
#
#   https://stackoverflow.com/q/43171648
#   https://stackoverflow.com/a/16746032
_sed_i() {
  if sed --help >/dev/null 2>&1
  then # GNU
    sed -i "${@}"
  else # BSD
    sed -i '' "${@}"
  fi
}

###############################################################################
# Deprecated Helpers
###############################################################################

# Usage: _die <command>
# NOTE: (Deprecated)
_die() { _exit_1 "${@}"; }

# Usage: _return_1 <command>
# NOTE: (Deprecated)
_return_1() { _warn "${@:-}" && return 1; }

###############################################################################
# describe
###############################################################################

# _escape_function_name()
#
# Usage:
#   _escape_function_name "some-function:name"
#
# Replace ":" and "-" with "__COLON__" and "__HYPHEN__" in function names in
# order to conform to Bash identifier restrictions.
#
# Bash allows ":" and "-" in function names, but they are not allowed in
# identifiers for variables. In order to store the description in a variable
# that matches the function name, this function escapes the function name in
# order to make it suitable for use in a variable identifier.
#
# Uses built-in substring replacement:
# http://www.tldp.org/LDP/abs/html/parameter-substitution.html#EXPREPL1
_escape_function_name() {
  local _escaped_colons="${1//:/__COLON__}"
  local _escaped_hyphens="${_escaped_colons//-/__HYPHEN__}"

  printf "%s" "${_escaped_hyphens}"
}

# describe()
#
# Usage:
#   describe <name> <description>
#   describe --get <name>
#
# Options:
#   --get  Print the description for <name> if one has been set.
#
# Examples:
# ```
#   describe "list" <<HEREDOC
# Usage:
#   ${_ME} list
#
# Description:
#   List items.
# HEREDOC
#
# describe --get "list"
# ```
#
# Set or print a description for a specified command or function <name>. The
# <description> text can be passed as the second argument or as standard input.
#
# To make the <description> text available to other functions, `describe()`
# assigns the text to a variable with the format `$____describe_<name>`.
#
# When the `--get` option is used, the description for <name> is printed, if
# one has been set.
describe() {
  set +e
  [[ -z "${1:-}" ]] &&
    _exit_1 printf "describe(): <name> required.\\n"

  if [[ "${1}" == "escape" ]]
  then
    local _escaped_colons="${2//:/__COLON__}"
    local _escaped_hyphens="${_escaped_colons//-/__HYPHEN__}"

    printf "%s" "${_escaped_hyphens}"
  elif [[ "${1}" == "--get" ]]
  then # get ------------------------------------------------------------------
    [[ -z "${2:-}" ]] &&
      _exit_1 printf "describe(): <description> required.\\n"

    local _name="${2:-}"

    local _name_escaped=
    _name_escaped="$(describe escape "${_name}")"

    local _describe_var="____describe_${_name_escaped}"

    if [[ ! "${_name}" =~ ^\- ]] && [[ -n "${!_describe_var:-}" ]]
    then
      printf "%s\\n" "${!_describe_var}"
    else
      printf "No additional information for \`%s\`\\n" "${_name}"
    fi
  else # set ------------------------------------------------------------------
    local _name_escaped=
    _name_escaped="$(describe escape "${1}")"

    if [[ -n "${2:-}" ]]
    then # argument is present
      read -r -d '' "____describe_${_name_escaped}" <<HEREDOC
${2}
HEREDOC
    else # no argument is present, so assume piped input
      read -r -d '' "____describe_${_name_escaped}"
    fi
  fi
  set -e
}

# Support deprecated `desc` name.
desc() { describe "${@:-}"; }

# Support deprecated `_print_desc()`.
_print_desc() { describe --get "${@:-}"; }

###############################################################################
# Default Commands
###############################################################################

# Version #####################################################################

describe "version" <<HEREDOC
Usage:
  ${_ME} ( version | --version )

Description:
  Display the current program version.

  To save you the trouble, the current version is ${_VERSION}
HEREDOC
version() {
  printf "%s\\n" "${_VERSION}"
}

# Help ########################################################################

describe "help" <<HEREDOC
Usage:
  ${_ME} help [<command>]

Description:
  Display help information for ${_ME} or a specified command.
HEREDOC
_help_header() {
if _is_sourced
then
  describe "HELP_HEADER" <<HEREDOC
${_ME} - a ${_THIS_BASENAME} script
HEREDOC
else
  describe "HELP_HEADER" <<HEREDOC
                 ___         ___         ___
    _____       /  /\       /  /\       /__/|
   /  /::\     /  /::\     /  /:/_     |  |:|
  /  /:/\:\   /  /:/\:\   /  /:/ /\    |  |:|
 /  /:/~/::\ /  /:/~/::\ /  /:/ /::\ __|  |:|
/__/:/ /:/\:/__/:/ /:/\:/__/:/ /:/\:/__/\_|:|____
\  \:\/:/~/:\  \:\/:/__\\  \:\/:/~/:\  \:\/:::::/
 \  \::/ /:/ \  \::/     \  \::/ /:/ \  \::/~~~~
  \  \:\/:/   \  \:\      \__\/ /:/   \  \:\\
   \  \::/     \  \:\       /__/:/     \  \:\\
    \__\/       \__\/       \__\/       \__\/

A mini-framework for command-centric Bash scripts.
HEREDOC
fi
}
_help_usage() {
if _is_sourced
then
  cat <<HEREDOC
Usage:
  ${_ME} <command> [--command-options] [<arguments>]
  ${_ME} -h | --help

Options:
  -h --help  Display this help information.

Help:
  ${_ME} help [<command>]
HEREDOC
else
  cat <<HEREDOC
Usage:
  ${_ME} <command> [--command-options] [<arguments>]
  ${_ME} -h | --help
  ${_ME} --version

Options:
  -h --help  Display this help information.
  --version  Display version information.

Help:
  ${_ME} help [<command>]
HEREDOC
fi

}
_help_header
help() {
  if [[ -z "${1:-}" ]]
  then
    cat <<HEREDOC
$(describe --get "HELP_HEADER")

$(_help_usage)

Home:
  https://github.com/xwmx/bask

$(commands --grouped)
HEREDOC
  else
    describe --get "${1}"
  fi
}

# Command List ################################################################

# `commands` behaves differently depending on whether this program is sourced
# by a dependent script or whether it's being run directly with commands
# defined in a Baskfile. Since the command list for a dependent script is
# more limited and only includes commands relevant to that script itself, the
# '--group' option is not included.
if _is_sourced
then
  describe "commands" <<HEREDOC
Usage:
  ${_ME} commands --raw

Options:
  --raw      Display the command list without formatting.

Description:
  Display the list of available commands.
HEREDOC
  commands() {
    if [[ "${1:-}" == "--raw" ]]
    then
      printf "%s\\n" "${_DEFINED_COMMANDS[@]}"
    else
      printf "Available commands:\\n"
      printf "  %s\\n" "${_DEFINED_COMMANDS[@]}"
    fi
  }
else
  describe "commands" <<HEREDOC
Usage:
  ${_ME} commands [--raw | --grouped]
  ${_ME} commands alias <name> <alias>

Options:
  --raw      Display the command list without formatting.
  --grouped  Display the list of commands with default and locally defined
             commands in labeled groups.

Subcommands:
  alias      Create an <alias> of a given command <name>, with linked help.

Description:
  Display the list of available commands.
HEREDOC
  commands() {
    case "${1:-}" in
      --raw)
        printf "%s\\n" "${_DEFINED_COMMANDS[@]}"
        ;;
      --grouped)
        printf "Default commands:\\n"
        printf "  %s\\n" "${_BUILTIN_COMMANDS[@]}"

        # Only display local command section when defined tasks are available.
        if [[ -n "${_LOCAL_COMMANDS[*]:-}" ]]
        then
          printf "\\nLocal commands:\\n"
          printf "  %s\\n" "${_LOCAL_COMMANDS[@]:-}"
        fi
        ;;
      alias)
        if [[ -z "${2:-}" ]] || [[ -z "${3:-}" ]]
        then
          _exit_1 _help "commands"
        else
          _alias_subcommand "${2:-}" "${3:-}"
        fi
        ;;
      *)
        printf "Available commands:\\n"
        printf "  %s\\n" "${_DEFINED_COMMANDS[@]}"
        ;;
    esac
  }
fi
_alias_subcommand "commands" "subcommands"
_alias_subcommand "commands" "tasks"

# new #########################################################################

describe "new" <<HEREDOC
Usage:
  ${_ME} new [program]

Description:
  Create a Baskfile in the current directory. If a program name is provided,
  generate a ${_ME}-dependent program with the provided name.
HEREDOC
_generate_baskfile() {
  if [[ -f "Baskfile" ]]
  then
    printf ">> Baskfile already exists in this location.\\n"
    exit 0
  fi

  local _content
  read -r -d '' _content <<TEMPLATE || true
describe "hello" <<HEREDOC
Usage:
  ${_ME} hello

Description:
  Print a greeting.
HEREDOC
hello() {
  echo ">> Hello from ${_ME}!"
}
TEMPLATE

  printf ">> Creating new Baskfile in %s\\n" "${_CALLER_DIRECTORY}"
  printf "%s\\n" "${_content}" >> "Baskfile"
  exit 0
}
_generate_bask_script() {
  if [[ -f "${1:-}" ]]
  then
    printf ">> %s already exists\\n" "${1}"
    exit 0
  fi

  local _script_basename
  _script_basename="$(basename "${1}")"
  _debug printf \
    "_generate_bask_script() \${_script_basename}: %s\\n" \
    "${_script_basename}"

  local _content
  read -r -d '' _content <<TEMPLATE || true
#!/usr/bin/env bash
###############################################################################
# ${_script_basename} - a ${_ME} script
#
# Get ${_ME}:
#   https://github.com/xwmx/${_ME}
#
# Add this script and the ${_ME} program to your \$PATH.
#
# For usage information, run:
#   ${_script_basename} help
###############################################################################

# Load ${_ME}
#
# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=/dev/null
source "\$(command -v ${_ME})"

describe "hi" <<HEREDOC
Usage:
  \$_ME hi

Description:
  Print a greeting.
HEREDOC
hi() {
  echo ">> Hi from ${_script_basename}!"
}

_init
TEMPLATE

  printf ">> Creating new bask script: %s\\n" "${1}"
  printf "%s\\n" "${_content}" >> "${1}"
  chmod +x "${1}"
  exit 0
}
new() {
  _debug printf "new() \${PWD}: %s\\n" "${_CALLER_DIRECTORY}"

  if [[ -n "${1:-}" ]]
  then
    _generate_bask_script "${1}"
  else
    _generate_baskfile
  fi
}

###############################################################################
# Commands
# =============================================================================
#
# Example command group structure:
#
# describe example ""   - Optional. A short description for the command.
# example() { : }   - The command called by the user.
#
# For usage formatting conventions see:
#   - http://docopt.org/
#   - http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
#
#
# ==============
# Micro Example
# ==============
#
# describe "micro" "Usage: $_ME micro"
# micro() {
#   echo "Hello, World!"
# }
#
# ==============
# Simple Example
# ==============
#
# describe "simple" <<HEREDOC
# Usage:
#   $_ME simple [<name>]
#
# Description:
#   Print the greeting, "Hello, World!"
# HEREDOC
# simple() {
#   if [[ -n "${1:-}" ]]
#   then
#     local _name="${1}"
#   else
#     local _name="World"
#   fi
#   printf "Hello, %s!\\n" "${_name}"
# }
#
# ===============
# Complex Example
# ===============
#
# describe "complex" <<HEREDOC
# Usage:
#   $_ME complex [<name>] [--farewell]
#
# Options:
#   --farewell  Print "Goodbye, World!"
#
# Description:
#   Print the greeting, "Hello, World!"
# HEREDOC
# complex() {
#   local _greeting="Hello"
#   local _arguments=()
#
#   for __arg in "${@:-}"
#   do
#     case "${__arg}" in
#       --farewell)
#         _greeting="Goodbye"
#         ;;
#       -*)
#         _exit_1 printf "Unexpected option: %s\\n" "${__arg}"
#         ;;
#       *)
#         _arguments+=("${__arg}")
#         ;;
#     esac
#   done
#
#   local _name="${_arguments[1]:-}"
#
#   if [[ -n "${_name}" ]]
#   then
#     printf "%s, %s!\\n" "${_greeting}" "${_name}"
#   else
#     printf "%s, World!\\n" "${_greeting}"
#   fi
# }
###############################################################################

###############################################################################
# Run Program
###############################################################################

# Call the _init function now that everything has been defined unless this file
# is sourced by a dependent script.
if ! _is_sourced
then
  _init
fi
